{"version":3,"sources":["assets/img/greg-rakozy-unsplash.jpg","pages/homePage.jsx","serviceWorker.js","index.js"],"names":["module","exports","GET_STARSHIPS_INFO","gql","Cover","img","width","height","backgroundImage","backgroundPhoto","backgroundSize","backgroundPosition","zIndex","position","top","Fragment","style","fontSize","color","textAlign","Component","Starships","useQuery","loadingStarships","loading","errorStarships","error","dataStarships","data","message","console","dir","starships","allStarships","map","name","HomePage","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kD,otBCO3C,IAAMC,EAAqBC,YAAH,KA2BlBC,E,uKAEF,IAAMC,EAAM,CACVC,MAAO,QACPC,OAAQ,QACRC,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,OAChBC,mBAAoB,SACpBC,OAAQ,KACRC,SAAU,WACVC,IAAK,GAQP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,MAAOX,IACZ,wBAAIW,MARa,CACnBC,SAAU,MACVC,MAAO,OACPC,UAAW,WAKT,kB,GArBYC,aA2BpB,SAASC,IAAa,IAAD,EAKfC,mBAASpB,GAHFqB,EAFQ,EAEjBC,QACOC,EAHU,EAGjBC,MACMC,EAJW,EAIjBC,KAGF,GAAIL,EAAkB,OAAO,yCAC7B,GAAIE,EAAgB,OAAO,gDAAsBA,EAAeI,SAChEC,QAAQC,IAAIJ,GACZ,IAAMK,EAAYL,EAAcM,aAAaC,KAAI,SAACF,GAAD,OAC/C,6BACE,2BACE,2BAAIA,EAAUG,WAIpB,OACE,kBAAC,IAAMpB,SAAP,KACE,+CACCiB,GAKQ,SAASI,IACtB,OACE,kBAAC,IAAMrB,SAAP,KACE,kBAAC,EAAD,MACA,kBAACM,EAAD,OC9EcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCRAC,EAAWC,yBAAe,CAC9BC,IAAK,sCAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EAAQC,aAAaC,QAAQ,SAEnC,MAAO,CACLH,QAAQ,2BACHA,GADE,IAELI,cAAeH,EAAK,iBAAaA,GAAU,SAK3CI,EAAS,IAAIC,eAAa,CAC9BC,KAAMV,EAASW,OAAOd,GACtBe,MAAO,IAAIC,kBAEbC,IAASC,OACP,kBAAC,iBAAD,CAAgBP,OAAQA,GACtB,kBAACjB,EAAD,OAEFyB,SAASC,eAAe,SDiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLI,QAAQJ,MAAMA,EAAMG,c","file":"static/js/main.d65b9f86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greg-rakozy-unsplash.c43da60a.jpg\";","import React, { Component } from \"react\";\r\nimport \"../assets/css/fonts.scss\";\r\nimport backgroundPhoto from \"../assets/img/greg-rakozy-unsplash.jpg\";\r\n\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nconst GET_STARSHIPS_INFO = gql`\r\n  {\r\n    allStarships {\r\n      edges {\r\n        node {\r\n          id\r\n          name\r\n          filmConnection {\r\n            films {\r\n              id\r\n              title\r\n              director\r\n              releaseDate\r\n            }\r\n          }\r\n          pilotConnection {\r\n            pilots {\r\n              id\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Cover extends Component {\r\n  render() {\r\n    const img = {\r\n      width: \"100vw\",\r\n      height: \"100vh\",\r\n      backgroundImage: `url(${backgroundPhoto})`,\r\n      backgroundSize: \"100%\",\r\n      backgroundPosition: \"bottom\",\r\n      zIndex: \"-1\",\r\n      position: \"absolute\",\r\n      top: 0,\r\n    };\r\n\r\n    const headingStyle = {\r\n      fontSize: \"8vw\",\r\n      color: \"#fff\",\r\n      textAlign: \"center\",\r\n    };\r\n    return (\r\n      <React.Fragment>\r\n        <div style={img}></div>\r\n        <h1 style={headingStyle}>STARSHIPS</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Starships() {\r\n  const {\r\n    loading: loadingStarships,\r\n    error: errorStarships,\r\n    data: dataStarships,\r\n  } = useQuery(GET_STARSHIPS_INFO);\r\n\r\n  if (loadingStarships) return <p>Loading...</p>;\r\n  if (errorStarships) return <p>There's an error: {errorStarships.message}</p>;\r\n  console.dir(dataStarships);\r\n  const starships = dataStarships.allStarships.map((starships) => (\r\n    <div>\r\n      <p>\r\n        <b>{starships.name}</b>\r\n      </p>\r\n    </div>\r\n  ));\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Star Wars Films</h1>\r\n      {starships}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <React.Fragment>\r\n      <Cover />\r\n      <Starships />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport HomePage from \"./pages/homePage\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"https://graphql.org/swapi-graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <HomePage />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}